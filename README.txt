## üìö Sistema de Biblioteca ‚Äì Documenta√ß√£o Geral

### üß† Vis√£o Geral

Este sistema de biblioteca √© um projeto em Java com foco em pr√°ticas de programa√ß√£o orientada a objetos e separa√ß√£o de responsabilidades. Ele permite gerenciar **livros, autores e editoras** por meio de funcionalidades CRUD (criar, ler, atualizar e deletar), al√©m de realizar opera√ß√µes de empr√©stimo, devolu√ß√£o e reserva de livros.

---

### üèóÔ∏è Estrutura de Camadas

| Camada             | Fun√ß√£o                                                   | Exemplos de Classes                                                             |
| ------------------ | -------------------------------------------------------- | ------------------------------------------------------------------------------- |
| **UI** (interface) | Intera√ß√£o com o usu√°rio (menus e fluxos)                 | `InterfaceBiblioteca`, `MenuLivros`, `MenuAutores`, `MenuEditoras`              |
| **Business**       | Regras de neg√≥cio, l√≥gica de valida√ß√£o                   | `CatalogoLivros`, `CatalogoAutores`, `CatalogoEditoras`                         |
| **Data**           | Acesso, armazenamento e opera√ß√µes diretas sobre os dados | `OperacoesLivros`, `OperacoesAutores`, `OperacoesEditoras`, `OperacoesArquivos` |
| **Model**          | Representa√ß√£o dos dados                                  | `Livro`, `Autor`, `Editora`                                                     |

---

### üîÑ Funcionalidades

#### Livros

- Cadastrar, atualizar, remover e listar
- Emprestar e devolver
- Reservar e cancelar reserva

#### Autores e Editoras

- Cadastrar, atualizar, remover e listar

#### Arquivos

- Salvar e carregar dados

---

### ‚ñ∂Ô∏è Como Executar

1. Importe o projeto para uma IDE como Eclipse ou IntelliJ
2. Compile o projeto
3. Rode a classe `InterfaceBiblioteca.java` (ou o `main()` principal, se estiver separado)
4. Siga as instru√ß√µes exibidas nas janelas

---

### üìù Tecnologias Utilizadas

- Java 8+
- Java Swing (`JOptionPane`)
- Organiza√ß√£o em camadas (MVC simplificado)

---

### üõ†Ô∏è Melhorias Futuras (sugest√µes)

- Separar `model` de `data` com classes POJO (`Livro`, `Autor`, `Editora`)
- Substituir `JOptionPane` por uma interface gr√°fica mais rica (JavaFX ou Swing avan√ßado)
- Adicionar persist√™ncia com banco de dados (ex: SQLite, MySQL)
- Implementar tratamento de exce√ß√µes personalizado
- Permitir busca e filtros no cat√°logo
- Criar testes unit√°rios com JUnit

---

- Projeto refeito como exerc√≠cio de revis√£o pessoal

